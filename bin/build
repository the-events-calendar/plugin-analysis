#!/usr/bin/env bash
#
# Build a release-ready version of the plugin.
#
# USAGE:
#
#   build [<filename>]
#
# ARGUMENTS:
#
#   <filename>  The filename for the generated archive. Default is "plugin-starter.zip".

set -e

# Set up colors.
color_cyan="\033[0;36m"
color_green="\033[0;32m"
color_red="\033[0;31m"
color_reset="\033[0;0m"

output_file="$(basename "${1:-"plugin-starter.zip"}")"

# Output helpers
info() {
    printf "\n${color_cyan}%s${color_reset}\n" "$1"
}

error() {
    printf "\n${color_red}[ERROR] ${color_reset}%s\n" "$1" >&2
}

# Make sure that we have the plugin-starter directory and main file.
if [[ ! -d "plugin-starter" || ! -f "plugin-starter.php" ]]; then
	error "Could not find the plugin-starter directory or main file."
	exit 1
fi

# Make sure Composer is already installed
info "Verifying that Composer is installed"
composer_path="$(command -v composer)"

if [[ -n $composer_path ]]; then
    printf "Using Composer at %s\n" "$composer_path"
else
    error "Composer could not be found locally!"
    echo "Please visit https://getcomposer.org/download/ for instructions"
    exit 2
fi

# Make sure rsync is already installed
info "Verifying that rsync is installed"
rsync_path="$(command -v rsync)"

if [[ -n $rsync_path ]]; then
    printf "Using rsync at %s\n" "$rsync_path"
else
    error "rsync could not be found locally!"
    echo "Please visit https://rsync.samba.org/ for instructions"
    exit 2
fi

# Remove the old dist/ directory, if it exists
if [[ -d dist ]]; then
    info "Removing existing dist/ directory"
    rm -rf ./dist
fi

mkdir -p dist

info "Copying files"
cp plugin-starter.php dist/plugin-starter.php
cp composer.json dist/composer.json
cp composer.lock dist/composer.lock

# Copy over everything from plugin-starter/ into dist/, without the vendor folder, dotfiles, node_modules folder, src folder, npm package files, and config.js files.
rsync --recursive --verbose --exclude='vendor' --exclude='.*' --exclude="node_modules" --exclude="src" --exclude="package.json" --exclude="package-lock.json" --exclude="*.config.js" ./plugin-starter dist/

# Install the production dependencies with an optimized autoloader.
info "Installing production dependencies"
composer install --working-dir=dist --no-dev --no-progress --optimize-autoloader

# We don't need to distribute Composer files.
rm dist/composer.json
rm dist/composer.lock

# Run Laravel Mix to build production dependencies.
MIX_BUILD_DIR=dist/plugin-starter npm run production

# Finally, create the output zip file.
info "Building ${output_file}"

# Remove the existing archive, if one exists.
if [ -f "$output_file" ]; then
	info "Removing the existing ${output_file} archive"
	rm "$output_file"
fi

# Important: This needs to be run from within the dist/ directory, or the resulting archive will
# have an additional level of file hierarchy that will break the plugin!
cd dist || exit 1;
zip --quiet --recurse-paths --no-dir-entries "../${output_file}" .

# Test the archive structure.
info "Testing ${output_file}"
archive_contents="$(zipinfo -1 "../${output_file}")"

if ! grep -qx 'plugin-starter.php' <<< "$archive_contents"; then
	error "${output_file} should have 'plugin-starter.php' at the root of the archive."
	exit 1
fi

printf "\n${color_green}%s has been built successfully!${color_reset}\n" "$output_file"
