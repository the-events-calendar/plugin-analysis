{
    "name": "the-events-calendar/plugin-analysis",
    "description": "",
    "type": "wordpress-plugin",
    "license": "MIT",
    "authors": [
        {
            "name": "The Events Calendar",
            "homepage": "https://theeventscalendar.com"
        }
    ],
    "version": "1.0.0",
    "repositories": [
        {
            "name": "lucatume/di52",
            "type": "github",
            "url": "https://github.com/lucatume/di52",
            "no-api": true
        },
        {
            "name": "stellarwp/models",
            "type": "github",
            "url": "https://github.com/stellarwp/models",
            "no-api": true
        }
    ],
    "autoload": {
        "psr-4": {
            "PPerf_Analysis\\": "src/"
        },
        "classmap": [
            "vendor/vendor-prefixed/"
        ]
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "minimum-stability": "stable",
    "require": {
        "php": "^8.0",
        "lucatume/di52": "^3.3",
        "psr/container": "^1.0.0",
        "stellarwp/container-contract": "^1.0.4",
        "stellarwp/db": "^1.0.3",
        "stellarwp/models": "dev-feat/type-validation",
        "stellarwp/schema": "^1.1"
    },
    "require-dev": {
        "assertwell/wp-core-test-framework": "^0.2",
        "mockery/mockery": "^1.3",
        "php-stubs/wordpress-tests-stubs": "^5.8",
        "stellarwp/coding-standards": "^1.0",
        "szepeviktor/phpstan-wordpress": "^1.0",
        "wp-cli/wp-cli": "^2.6",
        "yoast/phpunit-polyfills": "^1.0"
    },
    "scripts": {
        "build": [
            "bin/build"
        ],
        "make:bootstrap": [
            "bin/make-bootstrap"
        ],
        "test": [
            "@test:all"
        ],
        "test:all": [
            "@test:unit",
            "@test:standards",
            "@test:analysis"
        ],
        "test:analysis": [
            "phpstan analyse -c phpstan.neon.dist --memory-limit=512M"
        ],
        "test:coverage": [
            "phpdbg -qrr -d memory_limit=-1 ./vendor/bin/phpunit --coverage-html=tests/coverage --coverage-text --colors=always"
        ],
        "test:standards": [
            "phpcs --cache",
            "php-cs-fixer fix --config=vendor/stellarwp/coding-standards/src/php-cs-fixer.php -v --diff --dry-run"
        ],
        "test:unit": [
            "phpunit --testdox --colors=always"
        ],
        "strauss": [
            "test -f ./bin/strauss.phar || curl -o bin/strauss.phar -L -C - https://github.com/BrianHenryIE/strauss/releases/download/0.13.0/strauss.phar",
            "@php bin/strauss.phar"
        ],
        "post-install-cmd": [
            "@strauss"
        ],
        "post-update-cmd": [
            "@strauss"
        ]
    },
    "extra": {
        "strauss": {
            "target_directory": "vendor/vendor-prefixed",
            "namespace_prefix": "PPerf_Analysis",
            "classmap_prefix": "PPerf_Analysis__",
            "constant_prefix": "PPERF_ANALYSIS_",
            "packages": [
                "stellarwp/container-contract",
                "stellarwp/db",
                "stellarwp/models",
                "lucatume/di52",
                "psr/container"
            ],
            "exclude_from_prefix": {
                "file_patterns": []
            }
        }
    },
    "scripts-descriptions": {
        "build": "Build a release-ready archive of the plugin.",
        "make:bootstrap": "Generate a stellarwp-bootstrap.php file adjacent to the project directory.",
        "test:all": "Run all automated tests.",
        "test:analysis": "Perform static code analysis.",
        "test:coverage": "Generate code coverage reports.",
        "test:standards": "Check coding standards.",
        "test:unit": "Run all of the PHPUnit test suites."
    },
    "config": {
        "preferred-install": "dist",
        "sort-packages": true,
        "vendor-dir": "vendor",
        "bin-dir": "vendor/bin",
        "allow-plugins": {
            "composer/installers": true,
            "dealerdirect/phpcodesniffer-composer-installer": true
        }
    }
}
