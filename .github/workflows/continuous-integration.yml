# This is the main Continuous Integration (CI) pipeline for the the stellarwp/plugin-starter package.
#
# Any time code is pushed to one of the main branches or a PR is opened, this pipeline should be
# run to ensure everything still works as designed and meets our coding standards.
name: CI Pipeline

# Execute on pushes to develop or main, as well as all PRs.
on:
  push:
    branches:
      - develop
      - main
  pull_request:

jobs:

  # Execute all PHPUnit tests.
  phpunit:
    name: PHPUnit (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Run on all versions of PHP supported by WordPress.
        php-versions: ['5.6', '7.0', '7.1', '7.2', '7.3', '7.4', '8.0', '8.1']
        wp-versions: ['latest']

    services:
      mysql:
        image: mysql:${{ (matrix.php-versions < 7.4 && '5.7') || '8.0' }}
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: false
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=10s --health-retries=10

    steps:
      - uses: actions/checkout@v2

      - name: Configure PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, intl
          coverage: none

      - name: Configure Composer
        run: composer config github-oauth.github.com ${{ secrets.STELLARWP_ACCESS_TOKEN }}

      - name: Remove unneeded Composer dependencies
        run: |
          composer remove --dev --no-progress --no-update \
            stellarwp/coding-standards \
            szepeviktor/phpstan-wordpress

      - uses: ramsey/composer-install@v2
        with:
          dependency-versions: highest

      - name: Set up WordPress
        run: bash plugin-starter/vendor/bin/install-wp-tests.sh wordpress_test root '' 127.0.0.1:3306 ${{ matrix.wp-versions }}

      - name: Run PHPUnit
        run: composer test:unit

  # Check coding standards (PHP_CodeSniffer, PHP-CS-Fixer, ESLint)
  coding-standards:
    name: Coding standards
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring
          coverage: none

      - name: Configure Composer
        run: composer config github-oauth.github.com ${{ secrets.STELLARWP_ACCESS_TOKEN }}

      - uses: ramsey/composer-install@v2

      - uses: bahmutov/npm-install@v1

      - name: Check PHP coding standards
        run: composer test:standards

      - name: Check JS coding standards
        run: npm run lint

  # Static Code Analysis (PHPStan)
  static-code-analysis:
    name: Static code analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl
          coverage: none

      - name: Configure Composer
        run: composer config github-oauth.github.com ${{ secrets.STELLARWP_ACCESS_TOKEN }}

      - uses: ramsey/composer-install@v2

      - name: Run PHPStan
        run: composer test:analysis

  # Pre-flight checks
  pre-flight:
    name: Pre-flight checks
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Determine the release version
        id: parse-version
        env:
          # This looks scary, but it's a PCRE regular expression that parses the version number
          # from a branch name based on semver.
          #
          # Reference and examples of matched patterns: https://regexr.com/6jfqu
          pattern: '(?:^|\/)v?\.?\K(\d+\.\d+\.\d+(-[0-9A-Za-z-]+(?:\.\d+)?)?(\+(?:\.?[0-9A-Za-z-]+)+)?)$'
        run: |
          version=$(grep -oP "${{ env.pattern }}" <<< "${{ github.event.pull_request.head.ref }}")
          echo "::set-output name=version::$version"
          echo "Parsed version: '${version}'"

      - name: Configure PHP environment
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          extensions: mbstring, intl
          coverage: none

      - name: Configure Composer
        run: composer config github-oauth.github.com ${{ secrets.STELLARWP_ACCESS_TOKEN }}

      - uses: ramsey/composer-install@v2

      - name: Verify plugin versions
        run: TERM=xterm plugin-starter/vendor/bin/check-version.sh --debug --file plugin-starter.php --version ${{ steps.parse-version.outputs.version }}
